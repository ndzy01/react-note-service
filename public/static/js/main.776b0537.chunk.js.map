{"version":3,"sources":["settings.ts","utils/request.ts","http/index.ts","views/Home.tsx","views/Add.tsx","views/Show.tsx","views/Editor.tsx","views/Search.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["service","axios","create","baseURL","settings","timeout","interceptors","request","use","config","err","Promise","reject","response","data","code","alert","api","url","type","method","history","createHashHistory","Home","useState","notes","setNotes","useEffect","then","res","map","note","Card","style","minWidth","key","noteId","Body","Title","title","Button","variant","marginLeft","onClick","push","pathname","color","size","id","Text","cTime","TitleInput","props","input","setInput","inputRef","useRef","className","InputGroup","Prepend","FormControl","ref","placeholder","aria-label","aria-describedby","name","value","onChange","current","Add","editorElemMenuRef","editorElemBodyRef","editorContent","setEditorContent","show","setShow","editor","E","window","innerWidth","customConfig","menus","onchange","html","txt","uploadImgShowBase64","pasteFilterStyle","pasteIgnoreImg","uploadFileName","uploadImgServer","uploadImgMaxLength","uploadImgHooks","customInsert","insertImg","result","paddingTop","Toast","display","onClose","delay","autohide","Header","content","backgroundColor","border","padding","height","borderTop","Show","mTime","setMTime","location","substring","lastIndexOf","paddingLeft","Edit","setId","Search","App","isShow","setIsShow","app","ButtonGroup","exact","path","component","Editor","MSearch","i","maxWidth","margin","Append","Container","fluid","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.776b0537.chunk.js","sourcesContent":["/*\n * @Author: ndzy\n * @Date: 2020-03-08 19:42:10\n * @LastEditTime: 2020-03-08 19:44:41\n * @LastEditors: ndzy\n */\nexport default {\n  url: 'http://www.ndzy01.com:3868/',\n  // imgUrl: 'http://localhost:3868/uploads/',\n  imgUrl: 'http://www.ndzy01.com:3866/upload',\n}\n","/*\n * @Author: ndzy\n * @Date: 2020-03-08 14:52:07\n * @LastEditTime: 2020-03-09 08:27:57\n * @LastEditors: ndzy\n */\n/*\n * @Author: ndzy\n * @Date: 2020-01-07 16:19:14\n * @LastEditTime: 2020-02-20 10:51:24\n * @LastEditors: ndzy\n */\nimport axios from 'axios'\nimport settings from '../settings'\n\n\n/* 创建axios实例 */\nconst service = axios.create({\n  baseURL: settings.url,\n  timeout: 60000, // 请求超时时间\n})\n\n// 添加一个请求拦截器\nservice.interceptors.request.use(\n  function(config) {\n    //在请求发出之前进行一些操作\n\n    return config\n  },\n  function(err) {\n    //Do something with request error\n    return Promise.reject(err)\n  }\n)\n//添加一个响应拦截器\nservice.interceptors.response.use(\n  function(response) {\n    const { data } = response\n    //在这里对返回的数据进行处理\n    if (data.code === 0) {\n      return response\n    }\n    if (data.code === 400) {\n      alert('编辑失败，内容不能为空！')\n      return Promise.reject('编辑失败！')\n    }\n    if (data.code === 500) {\n      alert('服务器出错！')\n      return Promise.reject('服务器出错！')\n    }\n\n    return response\n  },\n  function(err) {\n    alert('网络错误！')\n\n    //Do something with response error\n    return Promise.reject(err)\n  }\n)\n\nexport default service\n","/*\r\n * @Author: ndzy\r\n * @Date: 2020-03-06 16:08:36\r\n * @LastEditTime: 2020-03-08 15:42:04\r\n * @LastEditors: ndzy\r\n */\r\n\r\nimport request from '../utils/request'\r\n\r\nconst api = (url: string, type?: any, data?: any) => {\r\n  if (data) {\r\n    return request({\r\n      url,\r\n      method: type,\r\n      data,\r\n    })\r\n  }\r\n  return request({\r\n    url,\r\n    method: 'GET',\r\n  })\r\n}\r\n\r\nexport default api\r\n","import React, { useState, useEffect } from 'react'\nimport { Button, Card } from 'react-bootstrap'\nimport api from '../http/index'\nimport { createHashHistory } from 'history'\nimport { FaTrash, FaEye, FaBroom } from 'react-icons/fa'\nconst history = createHashHistory()\n\nexport default function Home() {\n  const [notes, setNotes] = useState([])\n\n  useEffect(() => {\n    api('/mongo/note/all').then((res: any) => {\n      setNotes(res.data.data)\n    })\n  }, [])\n\n  return (\n    <div>\n      {notes.map((note: any) => (\n        <Card style={{ minWidth: '18rem' }} key={note.noteId}>\n          <Card.Body>\n            <Card.Title>\n              {note.title}\n              <Button\n                variant=\"light\"\n                style={{ marginLeft: '20px' }}\n                onClick={() =>\n                  history.push({ pathname: '/show/' + note.noteId })\n                }\n              >\n                <FaEye color=\"skyBlue\" size={16} />\n              </Button>\n              <Button\n                variant=\"light\"\n                style={{ marginLeft: '20px' }}\n                onClick={() =>\n                  history.push({ pathname: '/edit/' + note.noteId })\n                }\n              >\n                <FaBroom color=\"skyBlue\" size={16} />\n              </Button>\n              <Button\n                variant=\"light\"\n                style={{ marginLeft: '20px' }}\n                onClick={() => {\n                  api('/mongo/note/delNote', 'POST', { id: note.noteId }).then(\n                    res => {\n                      api('/mongo/note/all').then((res: any) => {\n                        setNotes(res.data.data)\n                      })\n                      alert('已删除！')\n                    }\n                  )\n                }}\n              >\n                <FaTrash color=\"red\" size={16} />\n              </Button>\n            </Card.Title>\n            <Card.Text>{note.cTime}</Card.Text>\n          </Card.Body>\n        </Card>\n      ))}\n    </div>\n  )\n}\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Button, FormControl, InputGroup, Toast } from 'react-bootstrap'\nimport { createHashHistory } from 'history'\nimport * as E from 'wangeditor'\nimport api from '../http/index'\nimport settings from '../settings'\nconst history = createHashHistory()\n\nfunction TitleInput(props) {\n  const [input, setInput] = useState('')\n  const inputRef: any = useRef()\n  return (\n    <div className=\"title-input\">\n      <InputGroup className=\"mb-3\">\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon2\">标题</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          ref={inputRef}\n          placeholder=\"请输入\"\n          aria-label=\"请输入\"\n          aria-describedby=\"basic-addon2\"\n          name=\"title\"\n          value={input}\n          onChange={() => {\n            setInput(inputRef.current.value)\n            props.onChange(inputRef.current.value)\n          }}\n        />\n      </InputGroup>\n    </div>\n  )\n}\n\nexport default function Add() {\n  const editorElemMenuRef: any = useRef()\n  const editorElemBodyRef: any = useRef()\n  const [input, setInput] = useState('')\n  let [editorContent, setEditorContent] = useState('')\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    const editor = new E(editorElemMenuRef.current, editorElemBodyRef.current)\n    if (window.innerWidth < 500) {\n      editor.customConfig.menus = [\n        'head', // 标题\n        'bold', // 粗体\n        'italic', // 斜体\n        'underline', // 下划线\n        'strikeThrough', // 删除线\n        'list', // 列表\n        'justify', // 对齐方式\n        'quote', // 引用\n        'image', // 插入图片\n      ]\n    } else {\n      editor.customConfig.menus = [\n        'head', // 标题\n        'bold', // 粗体\n        'fontSize', // 字号\n        'fontName', // 字体\n        'italic', // 斜体\n        'underline', // 下划线\n        'strikeThrough', // 删除线\n        // 'foreColor', // 文字颜色\n        // 'backColor', // 背景颜色\n        'link', // 插入链接\n        'list', // 列表\n        'justify', // 对齐方式\n        'quote', // 引用\n        // 'emoticon', // 表情\n        'image', // 插入图片\n        'table', // 表格\n        // 'video', // 插入视频\n        'code', // 插入代码\n        'undo', // 撤销\n        'redo', // 重复\n      ]\n    }\n    // 使用 onchange 函数监听内容的变化，并实时更新到\n    editor.customConfig.onchange = html => {\n      setEditorContent(editor.txt.html())\n    }\n    // 使用 base64 保存图片\n    editor.customConfig.uploadImgShowBase64 = true\n    // 关闭粘贴内容中的样式\n    editor.customConfig.pasteFilterStyle = false\n    // 忽略粘贴内容中的图片\n    editor.customConfig.pasteIgnoreImg = true\n    // 上传图片到服务器\n    editor.customConfig.uploadFileName = 'file' //设置文件上传的参数名称\n    editor.customConfig.uploadImgServer = settings.imgUrl //设置上传文件的服务器路径\n    editor.customConfig.uploadImgMaxLength = 5\n\n    editor.customConfig.uploadImgHooks = {\n      customInsert: (insertImg, result, editor) => {\n        insertImg(result.data.url)\n      },\n    }\n    editor.create()\n  }, [])\n\n  return (\n    <div className=\"add\" style={{ paddingTop: '10px' }}>\n      <Toast\n        style={show ? { display: 'block' } : { display: 'none' }}\n        onClose={() => setShow(false)}\n        show={show}\n        delay={2000}\n        autohide\n      >\n        <Toast.Header>\n          <strong className=\"mr-auto\">提示</strong>\n        </Toast.Header>\n        <Toast.Body>\n          <span style={{ color: 'red' }}>请输入标题</span>\n        </Toast.Body>\n      </Toast>\n\n      <div style={{ display: 'flex' }}>\n        <TitleInput onChange={input => setInput(input)} />\n        <Button\n          style={{ marginLeft: '10px' }}\n          onClick={() => {\n            if (input === '') {\n              setShow(true)\n            } else {\n              api(\n                '/mongo/note/save',\n\n                'POST',\n                {\n                  title: input,\n                  content: editorContent,\n                }\n              ).then((res: any) => {\n                alert('已成功添加！')\n                history.push({ pathname: '/' })\n              })\n            }\n          }}\n        >\n          提交\n        </Button>\n      </div>\n      <div className=\"text-area\">\n        <div\n          ref={editorElemMenuRef}\n          style={{ backgroundColor: '#f1f1f1', border: '1px solid #ccc' }}\n          className=\"editorElem-menu\"\n        ></div>\n        <div\n          style={{\n            padding: '0 10px',\n            height: '70vh',\n            border: '1px solid #ccc',\n            borderTop: 'none',\n          }}\n          ref={editorElemBodyRef}\n          className=\"editorElem-body\"\n        ></div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useRef, useEffect } from 'react'\nimport * as E from 'wangeditor'\nimport api from '../http/index'\n\nexport default function Show(props) {\n  const editorElemMenuRef: any = useRef()\n  const editorElemBodyRef: any = useRef()\n  const [input, setInput] = useState('')\n  const [mTime, setMTime] = useState('')\n\n  useEffect(() => {\n    api(\n      '/mongo/note/getNote',\n\n      'POST',\n      {\n        id: props.location.pathname.substring(\n          props.location.pathname.lastIndexOf('/') + 1\n        ),\n      }\n    ).then((res: any) => {\n      const editor = new E(editorElemMenuRef.current, editorElemBodyRef.current)\n      editor.customConfig.menus = []\n      editor.create()\n      editor.txt.html(res.data.data.content)\n      setInput(res.data.data.title)\n      setMTime(res.data.data.mTime)\n    })\n  }, [props])\n\n  return (\n    <div>\n      <h1\n        style={{\n          padding: '10px',\n        }}\n      >\n        {input}\n      </h1>\n      <p>\n        <span>最后修改时间:{mTime}</span>\n      </p>\n      <div className=\"text-area\">\n        <div\n          ref={editorElemMenuRef}\n          style={{\n            display: 'none',\n          }}\n          className=\"editorElem-menu\"\n        ></div>\n        <div\n          ref={editorElemBodyRef}\n          style={{\n            paddingLeft: '10px',\n            height: '80vh',\n          }}\n          className=\"editorElem-body\"\n        ></div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Button, FormControl, InputGroup, Toast } from 'react-bootstrap'\nimport { createHashHistory } from 'history'\nimport * as E from 'wangeditor'\nimport api from '../http/index'\nimport settings from '../settings'\n\nconst history = createHashHistory()\n\nexport default function Edit(props) {\n  const editorElemMenuRef: any = useRef()\n  const editorElemBodyRef: any = useRef()\n  const inputRef: any = useRef()\n  const [id, setId] = useState('')\n  const [input, setInput] = useState('')\n  let [editorContent, setEditorContent] = useState('')\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    api(\n      '/mongo/note/getNote',\n\n      'POST',\n      {\n        id: props.location.pathname.substring(\n          props.location.pathname.lastIndexOf('/') + 1\n        ),\n      }\n    ).then((res: any) => {\n      const editor = new E(editorElemMenuRef.current, editorElemBodyRef.current)\n      if (window.innerWidth < 500) {\n        editor.customConfig.menus = [\n          'head', // 标题\n          'bold', // 粗体\n          'italic', // 斜体\n          'underline', // 下划线\n          'strikeThrough', // 删除线\n          'list', // 列表\n          'justify', // 对齐方式\n          'quote', // 引用\n          'image', // 插入图片\n        ]\n      } else {\n        editor.customConfig.menus = [\n          'head', // 标题\n          'bold', // 粗体\n          'fontSize', // 字号\n          'fontName', // 字体\n          'italic', // 斜体\n          'underline', // 下划线\n          'strikeThrough', // 删除线\n          // 'foreColor', // 文字颜色\n          // 'backColor', // 背景颜色\n          'link', // 插入链接\n          'list', // 列表\n          'justify', // 对齐方式\n          'quote', // 引用\n          // 'emoticon', // 表情\n          'image', // 插入图片\n          'table', // 表格\n          // 'video', // 插入视频\n          'code', // 插入代码\n          'undo', // 撤销\n          'redo', // 重复\n        ]\n      }\n\n      // 使用 onchange 函数监听内容的变化，并实时更新到\n      editor.customConfig.onchange = html => {\n        setEditorContent(editor.txt.html())\n      }\n      // 使用 base64 保存图片\n      editor.customConfig.uploadImgShowBase64 = true\n      // 关闭粘贴内容中的样式\n      editor.customConfig.pasteFilterStyle = false\n      // 忽略粘贴内容中的图片\n      editor.customConfig.pasteIgnoreImg = true\n      // 上传图片到服务器\n      editor.customConfig.uploadFileName = 'file' //设置文件上传的参数名称\n      editor.customConfig.uploadImgServer = settings.imgUrl //设置上传文件的服务器路径\n      editor.customConfig.uploadImgMaxLength = 5\n\n      editor.customConfig.uploadImgHooks = {\n        customInsert: (insertImg, result, editor) => {\n          insertImg(result.data.url)\n        },\n      }\n      editor.create()\n\n      editor.txt.html(res.data.data.content)\n      setInput(res.data.data.title)\n      setId(res.data.data.noteId)\n    })\n\n    // #end region\n    //\n  }, [props])\n\n  return (\n    <div className=\"add\" style={{ paddingTop: '10px' }}>\n      <Toast\n        style={show ? { display: 'block' } : { display: 'none' }}\n        onClose={() => setShow(false)}\n        show={show}\n        delay={2000}\n        autohide\n      >\n        <Toast.Header>\n          <strong className=\"mr-auto\">提示</strong>\n        </Toast.Header>\n        <Toast.Body>\n          <span style={{ color: 'red' }}>请输入标题</span>\n        </Toast.Body>\n      </Toast>\n      <div style={{ display: 'flex' }}>\n        <div>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon2\">标题</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              ref={inputRef}\n              placeholder=\"请输入\"\n              aria-label=\"请输入\"\n              aria-describedby=\"basic-addon2\"\n              name=\"title\"\n              value={input}\n              onChange={() => {\n                setInput(inputRef.current.value)\n              }}\n            />\n          </InputGroup>\n        </div>\n        <Button\n          style={{ marginLeft: '10px' }}\n          onClick={() => {\n            if (input === '') {\n              setShow(true)\n            } else {\n              api('/mongo/note/edit', 'POST', {\n                noteId: id,\n                title: input,\n                content: editorContent,\n              }).then((res: any) => {\n                alert('编辑成功！')\n                history.push({ pathname: '/' })\n              })\n            }\n          }}\n        >\n          提交\n        </Button>\n      </div>\n\n      <div className=\"text-area\">\n        <div\n          ref={editorElemMenuRef}\n          style={{\n            backgroundColor: '#f1f1f1',\n            border: '1px solid #ccc',\n          }}\n          className=\"editorElem-menu\"\n        ></div>\n        <div\n          style={{\n            padding: '0 10px',\n            // overflowY: 'scroll',\n            height: '70vh',\n            border: '1px solid #ccc',\n            borderTop: 'none',\n          }}\n          ref={editorElemBodyRef}\n          className=\"editorElem-body\"\n        ></div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Button, FormControl, InputGroup, Card } from 'react-bootstrap'\n\nimport api from '../http/index'\nimport { createHashHistory } from 'history'\nimport { FaTrash, FaEye, FaBroom } from 'react-icons/fa'\nconst history = createHashHistory()\n\nexport default function Search() {\n  const inputRef: any = useRef()\n\n  const [notes, setNotes] = useState([])\n  const [input, setInput] = useState('')\n\n  useEffect(() => {\n    if (input !== '') {\n      api('/mongo/note/search', 'POST', {\n        content: input,\n      }).then((res: any) => {\n        setNotes(res.data.data)\n      })\n    }\n  }, [input])\n\n  return (\n    <div>\n      <InputGroup className=\"mb-3\">\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon2\">搜索条件</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          ref={inputRef}\n          placeholder=\"请输入\"\n          aria-label=\"请输入\"\n          aria-describedby=\"basic-addon2\"\n          name=\"title\"\n          value={input}\n          onChange={() => {\n            setInput(inputRef.current.value)\n          }}\n        />\n      </InputGroup>\n      {notes.map((note: any) => (\n        <Card style={{ minWidth: '18rem' }} key={note.noteId}>\n          <Card.Body>\n            <Card.Title>\n              {note.title}\n              <Button\n                variant=\"light\"\n                style={{ marginLeft: '20px' }}\n                onClick={() =>\n                  history.push({ pathname: '/show/' + note.noteId })\n                }\n              >\n                <FaEye color=\"skyBlue\" size={16} />\n              </Button>\n              <Button\n                variant=\"light\"\n                style={{ marginLeft: '20px' }}\n                onClick={() =>\n                  history.push({ pathname: '/edit/' + note.noteId })\n                }\n              >\n                <FaBroom color=\"skyBlue\" size={16} />\n              </Button>\n              <Button\n                variant=\"light\"\n                style={{ marginLeft: '20px' }}\n                onClick={() => {\n                  api('/mongo/note/delNote', 'POST', { id: note.noteId }).then(\n                    res => {\n                      api('/mongo/note/search', 'POST', {\n                        content: input,\n                      }).then((res: any) => {\n                        setNotes(res.data.data)\n                      })\n                      alert('已删除！')\n                    }\n                  )\n                }}\n              >\n                <FaTrash color=\"red\" size={16} />\n              </Button>\n            </Card.Title>\n            <Card.Text>{note.cTime}</Card.Text>\n          </Card.Body>\n        </Card>\n      ))}\n    </div>\n  )\n}\n","import React, { useState, useRef } from 'react'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport {\n  Button,\n  Container,\n  ButtonGroup,\n  FormControl,\n  InputGroup,\n} from 'react-bootstrap'\nimport { FaHome, FaPlus, FaSearch } from 'react-icons/fa'\nimport { createHashHistory } from 'history'\n\nimport Home from './views/Home'\nimport Add from './views/Add'\nimport Show from './views/Show'\nimport Editor from './views/Editor'\nimport MSearch from './views/Search'\n\nconst history = createHashHistory()\nconst p = 'ndzy@2020'\n\nfunction App() {\n  const inputRef: any = useRef()\n  const [input, setInput] = useState('')\n  const [isShow, setIsShow] = useState(false)\n  const app = (\n    <div>\n      <ButtonGroup aria-label=\"Basic example\">\n        <Button variant=\"light\" onClick={() => history.push('/')}>\n          {' '}\n          <FaHome color=\"skyBlue\" size={32} />\n        </Button>\n\n        <Button variant=\"light\" onClick={() => history.push('/add')}>\n          {' '}\n          <FaPlus color=\"skyBlue\" size={32} />\n        </Button>\n        <Button variant=\"light\" onClick={() => history.push('/search')}>\n          {' '}\n          <FaSearch color=\"royalblue\" size={32} />\n        </Button>\n      </ButtonGroup>\n      <p></p>\n      <Router>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/add\" component={Add} />\n        <Route path=\"/show\" component={Show} />\n        <Route path=\"/edit\" component={Editor} />\n        <Route path=\"/search\" component={MSearch} />\n      </Router>\n    </div>\n  )\n\n  const i = (\n    <div>\n      <InputGroup\n        className=\"mb-3\"\n        style={{ maxWidth: '80vw', margin: '200px auto' }}\n      >\n        <FormControl\n          ref={inputRef}\n          placeholder=\"请输入\"\n          aria-label=\"请输入\"\n          aria-describedby=\"basic-addon2\"\n          name=\"title\"\n          value={input}\n          onChange={() => {\n            setInput(inputRef.current.value)\n          }}\n        />\n        <InputGroup.Append onClick={() => setIsShow(input === p)}>\n          <InputGroup.Text id=\"basic-addon2\">确认</InputGroup.Text>\n        </InputGroup.Append>\n      </InputGroup>\n    </div>\n  )\n\n  return (\n    <Container fluid={true} style={{ padding: '10px' }}>\n      {isShow ? app : i}\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}